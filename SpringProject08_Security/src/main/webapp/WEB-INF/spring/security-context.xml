<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- 암호화 객체를 만들어줌 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<bean id="customUserDetailsService" class="com.mysecurity.domain.CustomUserDetailsService"/>
	<!-- <bean id="customLoginSuccess" class="com.mysecurity.domain.CustomLoginSuccess"/> -->

	<security:http>
		<security:intercept-url pattern="/all" access="permitAll"/> <!-- 누구나 접근 가능하게 하겠다. -->
		<security:intercept-url pattern="/manager" access="hasRole('ROLE_MANAGER')"/> <!-- hasRole : 사용자가 주어진 역할이 있다면 접근을 허용 -->
		<!-- 로그인이 성공하면 customLoginSuccess로 가라.(authentication-success-handler-ref="customLoginSuccess") -->
		<security:form-login login-page="/customLogin" /> <!-- 내가 만든 로그인페이지로 이동하고 싶을 때 사용 -->
		
		<security:csrf disabled="true"/> <!-- csrf사용x  -->
		<!-- <security:logout invalidate-session="true" /> -->
		<security:logout invalidate-session="true" logout-url="/customLogout"/>
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>  <!-- password를 암호화를 시켜서 전달 -->
		</security:authentication-provider>
	
	</security:authentication-manager>	
</beans>
